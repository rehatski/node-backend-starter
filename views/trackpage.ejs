<!DOCTYPE html>
<html>

<head>
    <title>Title from host</title>
    <style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */

    #map {
        height: 100%;
    }

    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #header {
        display: block;
        width: 100%;
        height: 20px;
        color: white;
        background-color: #4E5B6E;
    }
    </style>
</head>

<body>
    <div id="map"></div>
    <script src="/socket.io/socket.io.js"></script>
    <script> // TODO: 
    var map;
    var currentMarker;
    var lat;
    var lng;
    var flareID;

    var updateMap = function(beacon) {
        lat = beacon.currentLat
        lng = beacon.currentLng
        map.setCenter(new google.maps.LatLng(lat, lng));
        currentMarker = new google.maps.Marker({
            position: new google.maps.LatLng(lat, lng),
            map: map,
            title: 'Hello World!'
        });

    }

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 37.5665, lng: 126.9780 },
            zoom: 17,
            styles: styleDark
        });

        let path = [location.protocol, '//', location.host, location.pathname].join('')
        flareID = location.pathname.split('/').pop()
        let url = "/api/flare/" + flareID


        // fetch last known location
        fetch(url, { method: 'GET' }).then(function(response) {
            if (!response.ok) {
                throw Error(response.statusText);
            }
            return response.json();
        }).then(function(beacon) {
            updateMap(beacon)
            var socket = io('/');
            socket.on(beacon.id, function(data) {
                var newLatLng = new google.maps.LatLng(data.currentLat, data.currentLng);
                currentMarker.setPosition(newLatLng);
                map.setCenter(newLatLng)
            });

            if ("geolocation" in navigator) {
                startClientUpdates()
            } else {
                prompt(window,
                    "extensions.foo-addon.allowGeolocation",
                    "shit",
                    function callback(allowed) { alert(allowed); });
            }

        }).catch(function(error) {
            updateMap(nil)
        });
    }

    function prompt(window, pref, message, callback) {
        let branch = Components.classes["@mozilla.org/preferences-service;1"]
            .getService(Components.interfaces.nsIPrefBranch);

        if (branch.getPrefType(pref) === branch.PREF_STRING) {
            switch (branch.getCharPref(pref)) {
                case "always":
                    return callback(true);
                case "never":
                    return callback(false);
            }
        }

        let done = false;

        function remember(value, result) {
            return function() {
                done = true;
                branch.setCharPref(pref, value);
                callback(result);
            }
        }

        let self = window.PopupNotifications.show(
            window.gBrowser.selectedBrowser,
            "geolocation",
            message,
            "geo-notification-icon", {
                label: "Share Location",
                accessKey: "S",
                callback: function(notification) {
                    done = true;
                    callback(true);
                }
            }, [{
                    label: "Always Share",
                    accessKey: "A",
                    callback: remember("always", true)
                },
                {
                    label: "Never Share",
                    accessKey: "N",
                    callback: remember("never", false)
                }
            ], {
                eventCallback: function(event) {
                    if (event === "dismissed") {
                        if (!done) callback(false);
                        done = true;
                        window.PopupNotifications.remove(self);
                    }
                },
                persistWhileVisible: true
            });
    }

    function startClientUpdates() {
        function geo_success(position) {
            sendClientUpdates(position)
        }

        function geo_error() {
            alert("Sorry, no position available.");
        }

        var geo_options = {
            enableHighAccuracy: true,
            maximumAge: 30000,
            timeout: 27000
        };

        var wpid = navigator.geolocation.watchPosition(geo_success, geo_error, geo_options);
    }

    function sendClientUpdates(position) {
        let url = "/api/flare/" + flareID
        let data = JSON.stringify({ lat: position.coords.latitude, lng: position.coords.longitude })
        var myHeaders = new Headers();
        myHeaders.append("Content-Type", "application/json");
        fetch(url, { method: 'POST', body: data, headers: myHeaders }).then(function(response) {
            if (!response.ok) {
                throw Error(response.statusText);
            }
            return response.json();
        }).then(function(beacon) {

        }).catch(function(error) {

        });
    }
    </script>
    
    <script>
    var styleDark = [{
            "elementType": "geometry",
            "stylers": [{
                "color": "#212121"
            }]
        },
        {
            "elementType": "labels.icon",
            "stylers": [{
                "visibility": "off"
            }]
        },
        {
            "elementType": "labels.text.fill",
            "stylers": [{
                "color": "#757575"
            }]
        },
        {
            "elementType": "labels.text.stroke",
            "stylers": [{
                "color": "#212121"
            }]
        },
        {
            "featureType": "administrative",
            "elementType": "geometry",
            "stylers": [{
                "color": "#757575"
            }]
        },
        {
            "featureType": "administrative.country",
            "elementType": "labels.text.fill",
            "stylers": [{
                "color": "#9e9e9e"
            }]
        },
        {
            "featureType": "administrative.land_parcel",
            "stylers": [{
                "visibility": "off"
            }]
        },
        {
            "featureType": "administrative.locality",
            "elementType": "labels.text.fill",
            "stylers": [{
                "color": "#bdbdbd"
            }]
        },
        {
            "featureType": "poi",
            "elementType": "labels.text.fill",
            "stylers": [{
                "color": "#757575"
            }]
        },
        {
            "featureType": "poi.park",
            "elementType": "geometry",
            "stylers": [{
                "color": "#181818"
            }]
        },
        {
            "featureType": "poi.park",
            "elementType": "labels.text.fill",
            "stylers": [{
                "color": "#616161"
            }]
        },
        {
            "featureType": "poi.park",
            "elementType": "labels.text.stroke",
            "stylers": [{
                "color": "#1b1b1b"
            }]
        },
        {
            "featureType": "road",
            "elementType": "geometry.fill",
            "stylers": [{
                "color": "#2c2c2c"
            }]
        },
        {
            "featureType": "road",
            "elementType": "labels.text.fill",
            "stylers": [{
                "color": "#8a8a8a"
            }]
        },
        {
            "featureType": "road.arterial",
            "elementType": "geometry",
            "stylers": [{
                "color": "#373737"
            }]
        },
        {
            "featureType": "road.highway",
            "elementType": "geometry",
            "stylers": [{
                "color": "#3c3c3c"
            }]
        },
        {
            "featureType": "road.highway.controlled_access",
            "elementType": "geometry",
            "stylers": [{
                "color": "#4e4e4e"
            }]
        },
        {
            "featureType": "road.local",
            "elementType": "labels.text.fill",
            "stylers": [{
                "color": "#616161"
            }]
        },
        {
            "featureType": "transit",
            "elementType": "labels.text.fill",
            "stylers": [{
                "color": "#757575"
            }]
        },
        {
            "featureType": "water",
            "elementType": "geometry",
            "stylers": [{
                "color": "#000000"
            }]
        },
        {
            "featureType": "water",
            "elementType": "labels.text.fill",
            "stylers": [{
                "color": "#3d3d3d"
            }]
        }
    ]
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB04T780E-GgRBVDnyjRFGD5lfULksXgZI&callback=initMap" async defer></script>
</body>

</html>
